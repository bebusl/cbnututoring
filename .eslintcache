[{"/home/tutoring/cbnututoring/src/index.js":"1","/home/tutoring/cbnututoring/src/App.js":"2","/home/tutoring/cbnututoring/src/services/auth.service.js":"3","/home/tutoring/cbnututoring/src/components/ProgramSelect.js":"4","/home/tutoring/cbnututoring/src/components/MyList.js":"5","/home/tutoring/cbnututoring/src/components/Register.js":"6","/home/tutoring/cbnututoring/src/components/Menu.js":"7","/home/tutoring/cbnututoring/src/components/AllList.js":"8","/home/tutoring/cbnututoring/src/components/CourseReg.js":"9","/home/tutoring/cbnututoring/src/components/Login.js":"10","/home/tutoring/cbnututoring/src/components/EnrolmentSeason.js":"11","/home/tutoring/cbnututoring/src/components/User.js":"12","/home/tutoring/cbnututoring/src/components/CourseManage.js":"13","/home/tutoring/cbnututoring/src/components/Report.js":"14","/home/tutoring/cbnututoring/src/components/ForgotPassword.js":"15","/home/tutoring/cbnututoring/src/components/Table.js":"16","/home/tutoring/cbnututoring/src/services/user.service.js":"17","/home/tutoring/cbnututoring/src/components/DialogContents.js":"18"},{"size":242,"mtime":1609730864077,"results":"19","hashOfConfig":"20"},{"size":6922,"mtime":1610933384457,"results":"21","hashOfConfig":"20"},{"size":453,"mtime":1609730864077,"results":"22","hashOfConfig":"20"},{"size":408,"mtime":1609730864075,"results":"23","hashOfConfig":"20"},{"size":669,"mtime":1609730864075,"results":"24","hashOfConfig":"20"},{"size":7565,"mtime":1610933384453,"results":"25","hashOfConfig":"20"},{"size":2368,"mtime":1610933384453,"results":"26","hashOfConfig":"20"},{"size":2361,"mtime":1609730864073,"results":"27","hashOfConfig":"20"},{"size":5283,"mtime":1610942503579,"results":"28","hashOfConfig":"20"},{"size":4512,"mtime":1610933384452,"results":"29","hashOfConfig":"20"},{"size":3378,"mtime":1609730864074,"results":"30","hashOfConfig":"20"},{"size":2035,"mtime":1609730864076,"results":"31","hashOfConfig":"20"},{"size":194,"mtime":1609730864073,"results":"32","hashOfConfig":"20"},{"size":6302,"mtime":1610933384453,"results":"33","hashOfConfig":"20"},{"size":4909,"mtime":1609730864074,"results":"34","hashOfConfig":"20"},{"size":16226,"mtime":1610935079357,"results":"35","hashOfConfig":"20"},{"size":1875,"mtime":1609730864077,"results":"36","hashOfConfig":"20"},{"size":11456,"mtime":1609730864074,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1cehjng",{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"40"},"/home/tutoring/cbnututoring/src/index.js",[],["90","91"],"/home/tutoring/cbnututoring/src/App.js",["92","93","94","95"],"import React, { useState, createContext, useEffect } from \"react\";\nimport { Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button } from \"evergreen-ui\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport AuthService from \"./services/auth.service\";\nimport Menu from \"./components/Menu\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport ProgramSelect from \"./components/ProgramSelect\";\nimport AllList from \"./components/AllList\";\nimport MyList from \"./components/MyList\";\nimport CourseReg from \"./components/CourseReg\";\nimport CourseManage from \"./components/CourseManage\";\nimport EnrolmentSeason from \"./components/EnrolmentSeason\";\nimport User from \"./components/User\";\nimport Report from \"./components/Report\";\nimport ForgotPassword from \"./components/ForgotPassword\";\n\nexport const IsLogin = createContext();\nexport const UserData = createContext();\nexport const HasRequired = createContext();\n\nconst program = \"tutor\";\nconst start_year = \"2020\";\nconst today = new Date();\n//const today_year = today.getFullYear() + 1;\nlet years = [];\nfor (var y = start_year; y <= 2026; y++) {\n  years.push(y);\n}\nconst studentNav = [\n  {\n    title: \"수강신청(강좌조회)\",\n    to: \"/alllist\",\n    component: (props) => <AllList years={years} {...props} />,\n  },\n  {\n    title: \"내 수강 목록\",\n    to: \"/mylist\",\n    component: (props) => <MyList years={years} {...props} />,\n  },\n];\nconst adminNav = [\n  {\n    title: \"강좌 등록\",\n    to: \"/coursereg\",\n    component: (props) => <CourseReg years={years} {...props} />,\n  },\n  {\n    title: \"강좌 관리\",\n    to: \"/coursemanage\",\n    component: (props) => <CourseManage years={years} {...props} />,\n  },\n  {\n    title: \"수강신청 기간 설정\",\n    to: \"/enrolmentseason\",\n    component: (props) => <EnrolmentSeason years={years} {...props} />,\n  },\n  {\n    title: \"보고서 관리\",\n    to: \"/report\",\n    component: (props) => <Report {...props} />,\n  },\n];\n\nconst App = (props) => {\n  const [loginStatus, setLoginStatus] = useState(false);\n  const [userData, setUserData] = useState({\n    name: \"name\",\n  });\n  const [hasRequired, setHasRequired] = useState(false);\n\n  const handleChangeUserData = (newData) => {\n    setUserData((state) => {\n      return Object.assign({}, state, newData);\n    });\n  };\n\n  useEffect(() => {\n    axios\n      .get(\"/api/accounts/auth\")\n      .then((res) => {\n        const data = res.data;\n        \n        setLoginStatus(data.success);\n        handleChangeUserData(data.account);\n        \n        setHasRequired(false);\n      })\n      .catch((err) => console.log(\"로그인 에러\", err));\n  }, [loginStatus]);\n\n  useEffect(() => {\n    axios\n      .get(\"/api/systems\")\n      .then((res) => console.log(res))\n      .catch((error) => console.log(error));\n  }, []);\n\n  const logOut = async () => {\n    await AuthService.logout().then(setLoginStatus(false));\n  };\n\n  return (\n    <IsLogin.Provider value={{ loginStatus, setLoginStatus }}>\n      <UserData.Provider value={{ userData, setUserData }}>\n        <div>\n          <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n            <Link to={\"/\"} className=\"navbar-brand\">\n              충북대학교 SW중심대학사업단 Keep-UpⓇ 관리 시스템\n            </Link>\n            <div className=\"navbar-nav mr-auto\">\n              {loginStatus && (\n                <li className=\"nav-item\">\n                  <Link to={\"/user\"} className=\"nav-link\">\n                    회원정보\n                  </Link>\n                </li>\n              )}\n            </div>\n\n            {loginStatus ? (\n              <div className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <Link to={\"/profile\"} className=\"nav-link\">\n                    {userData.name}님\n                  </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <a href=\"/login\" className=\"nav-link\" onClick={logOut}>\n                    로그아웃\n                  </a>\n                </li>\n              </div>\n            ) : (\n              <div className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <Link to={\"/login\"} className=\"nav-link\">\n                    로그인\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link to={\"/register\"} className=\"nav-link\">\n                    회원가입\n                  </Link>\n                </li>\n              </div>\n            )}\n          </nav>\n          <div className=\"selectMenu\">\n            <button>\n              <Link to=\"/tutor/student/alllist\">학부생 튜터링</Link>\n            </button>\n            <button>\n              <Link to=\"/ta/student/alllist\">TA</Link>\n            </button>\n          </div>\n\n          <div className=\"container\">\n            <Switch>\n              <Route exact path={[\"/\", \"/home\"]} component={Login} />\n              <Route exact path=\"/login\" component={Login}>\n                {loginStatus ? <Redirect to=\"/user\" /> : undefined}\n              </Route>\n              <Route exact path=\"/register\" component={Register} />\n              <Route exact path=\"/user\" component={User} />\n              <Route exact path=\"/forgotpassword\" component={ForgotPassword} />\n\n              {loginStatus &&\n                studentNav.map((url, idx) => {\n                  return (\n                    <Route exact path={`/tutor/student${url.to}`} key={idx}>\n                      {!loginStatus ? props.history.push(\"/login\") : undefined}\n                      <div className=\"menu\">\n                        {loginStatus && <Menu program={program} />}\n                      </div>\n\n                      <div className=\"main-column\">\n                        <h3>{url.title}</h3>\n                        {url.component(props)}\n                      </div>\n                    </Route>\n                  );\n                })}\n              {loginStatus &&\n                adminNav.map((url, idx) => (\n                  <Route\n                    exact\n                    path={`/tutor/admin${url.to}`}\n                    key={idx}\n                    render={(props) => {\n                      return (\n                        <>\n                          <div className=\"menu\">\n                            {loginStatus && <Menu program={program} />}\n                          </div>\n\n                          <div className=\"main-column\">\n                            <h3>{url.title}</h3>\n                            {url.component(props)}\n                          </div>\n                        </>\n                      );\n                    }}\n                  />\n                ))}\n            </Switch>\n          </div>\n        </div>\n      </UserData.Provider>\n    </IsLogin.Provider>\n  );\n};\n\nexport default App;\n","/home/tutoring/cbnututoring/src/services/auth.service.js",["96","97"],"import axios from \"axios\";\n\nconst register = (values) => {\n  console.log(\"젭알\", values);\n  return axios\n    .post(\"/api/accounts/register\", values)\n    .then((res) => console.log(\"회원가입test\", res));\n};\n\nconst login = (_id, password) => {\n  return axios.post(\"/api/accounts/\" + \"login\", {\n    _id,\n    password,\n  });\n};\n\nconst logout = () => {\n  return axios.get(\"/api/accounts/logout\");\n};\n\nexport default {\n  register,\n  login,\n  logout,\n};\n","/home/tutoring/cbnututoring/src/components/ProgramSelect.js",["98","99","100","101"],"import React from 'react'\nimport {Link, withRouter, BrowserRouter, HashRouter,Route, Switch} from 'react-router-dom'\n\n\n function Select(props){\n    return(\n\n                <div>\n                    <Link exact to=\"/tutor/student/alllist\">튜터링 시스템</Link>\n                    <Link exact to=\"/ta/student/alllist\">TA시스템</Link>\n                </div>\n\n    )\n}\n\nexport default withRouter(Select)","/home/tutoring/cbnututoring/src/components/MyList.js",["102","103","104"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Table from \"./Table\";\n\nconst MyList = ({ years }) => {\n  const [datas, setDatas] = useState();\n  const [myList, setMyList] = useState();\n  useEffect(() => {\n    console.log(\"MYLISTPAGE\");\n    axios\n      .get(`/api/registration/`)\n      .then(function (response) {\n        if (response.data.result !== datas) {\n          setDatas(response.data.result);\n        }\n      })\n      .catch((error) => {\n        console.log(\"erer : \", error.response);\n      });\n  }, []);\n\n  return (\n    <div>\n      <Table datas={datas} isMylist={true}></Table>\n    </div>\n  );\n};\n\nexport default MyList;\n","/home/tutoring/cbnututoring/src/components/Register.js",["105","106","107"],"import React, { useState, useRef } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport AuthService from \"../services/auth.service\";\nimport { toaster } from \"evergreen-ui\";\nimport { isEmail } from \"validator\";\n\nfunction useForm({ initialValues, onSubmit, validate }) {\n  const [values, setValues] = useState(initialValues);\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setValues({ ...values, [name]: value });\n    console.log(\"스테이트확인\", name, value);\n  };\n\n  const validPassword = (value) => {\n    if (values.password != values.checkPassword) {\n      return (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          비밀번호가 일치하지 않습니다.\n        </div>\n      );\n    }\n  };\n\n  const handleSubmit = async () => {\n    setSubmitting(true);\n    console.log(values);\n\n    const result = AuthService.register({\n      _id: values._id,\n      password: values.password,\n      name: values.name,\n      email: values.email,\n      phoneNumber: values.phoneNumber,\n      department: values.department,\n      role: values.role,\n    });\n    return result;\n  };\n\n  return {\n    values,\n    submitting,\n    handleChange,\n    handleSubmit,\n    validPassword,\n  };\n}\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        필수 입력 항목입니다.\n      </div>\n    );\n  }\n};\n\nconst validEmail = (value) => {\n  if (!isEmail(value)) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        유효한 이메일 형식이 아닙니다.\n      </div>\n    );\n  }\n};\n\nconst vusername = (value) => {\n  if (value.length < 3 || value.length > 20) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        학번(id)는 3~20글자 사이여야 합니다.\n      </div>\n    );\n  }\n};\n\nconst Register = (props) => {\n  const form = useRef();\n  const checkBtn = useRef();\n  const [message, setMessage] = useState(\"\");\n  const [successful, setSuccessful] = useState(false);\n  const { values, handleChange, handleSubmit, validPassword } = useForm({\n    initialValues: {\n      _id: \"\",\n      password: \"\",\n      checkPassword: \"\",\n      name: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      department: \"0\",\n      role: \"0\",\n    },\n  });\n\n  const handleRegister = (e) => {\n    e.preventDefault();\n    const result = handleSubmit(e);\n    setMessage(\"\");\n    setSuccessful(false);\n\n    form.current.validateAll();\n\n    if (checkBtn.current.context._errors.length === 0) {\n      result.then(\n        (response) => {\n          console.log(response);\n          setMessage(\"회원가입성공\");\n          setSuccessful(true);\n          props.history.push(\"/login\");\n        },\n        (error) => {\n          console.log(\"회원가입 에러 : \", error);\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          setMessage(\"이미 가입되어 있는 회원입니다.\");\n          setSuccessful(false);\n        }\n      );\n    }\n  };\n\n  return (\n    <div className=\"col-md-12\">\n      <div className=\"card card-container\">\n        <img\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n          alt=\"profile-img\"\n          className=\"profile-img-card\"\n        />\n\n        <Form onSubmit={handleRegister} ref={form}>\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"_id\">학번</label>\n              <Input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"_id\"\n                value={values._id}\n                onChange={handleChange}\n                validations={[required, vusername]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">비밀번호</label>\n              <Input\n                type=\"password\"\n                className=\"form-control\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"checkPassword\">비밀번호 확인</label>\n              <Input\n                type=\"password\"\n                className=\"form-control\"\n                name=\"checkPassword\"\n                value={values.checkPassword}\n                onChange={handleChange}\n                validations={[required, validPassword]}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"name\">이름</label>\n              <Input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"name\"\n                value={values.name}\n                onChange={handleChange}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">이메일</label>\n              <Input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                validations={[required, validEmail]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"phoneNumber\">휴대폰번호</label>\n              <Input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"phoneNumber\"\n                placeholder=\"-제외. 예시 : 01012345678\"\n                value={values.phoneNumber}\n                onChange={handleChange}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"department\">학과</label>\n              <select\n                name=\"department\"\n                value={values.department}\n                onChange={handleChange}\n              >\n                <option value=\"0\">컴퓨터공학과</option>\n                <option value=\"1\">소프트웨어학과</option>\n                <option value=\"2\">정보통신공학과</option>\n                <option value=\"3\">지능로봇공학과</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"role\">직위</label>\n              <select name=\"role\" value={values.role} onChange={handleChange}>\n                <option value=\"0\">학부생</option>\n                <option value=\"1\">대학원생</option>\n                <option value=\"2\">교직원</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <button className=\"btn btn-primary btn-block\">회원가입</button>\n            </div>\n          </div>\n\n          {message && (\n            <div className=\"form-group\">\n              <div\n                className={\n                  successful ? \"alert alert-success\" : \"alert alert-danger\"\n                }\n                role=\"alert\"\n              >\n                {message}\n              </div>\n            </div>\n          )}\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","/home/tutoring/cbnututoring/src/components/Menu.js",["108","109"],"import React, { Component, useEffect, useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Menu as MenuUI } from \"evergreen-ui\";\nimport { UserData, IsLogin } from \"../App\";\n\nfunction Menu(props) {\n  const { userData } = useContext(UserData);\n  const { loginStatus } = useContext(IsLogin);\n\n  const studentNav = [\n    {\n      title: \"수강신청(강좌조회)\",\n      to: \"/alllist\",\n      component: <div>수강신청(강좌조회)</div>,\n    },\n    {\n      title: \"내 수강 목록\",\n      to: \"/mylist\",\n      component: <div>내 수강 목록</div>,\n    },\n  ];\n  const adminNav = [\n    { title: \"강좌 등록\", to: \"/coursereg\", component: <div>강좌 등록</div> },\n    {\n      title: \"강좌 관리\",\n      to: \"/coursemanage\",\n      component: <div>강좌 관리</div>,\n    },\n    {\n      title: \"수강신청 기간 설정\",\n      to: \"/enrolmentseason\",\n      component: <div>수강신청 기간 설정</div>,\n    },\n    { title: \"보고서 관리\", to: \"/report\", component: <div>보고서 관리</div> },\n  ];\n\n  const Navtitle = { tutor: \"학부생 튜터링\", ta: \"TA프로그램\" };\n\n  useEffect(() => {\n    if (!loginStatus) {\n      window.alert(\"로그인이 필요한 페이지 입니다.\");\n      props.history.push(\"/login\");\n    }\n  });\n  console.log(\"프로그램 이름\", props.program);\n\n  return (\n    <div className=\"navigation\">\n      <MenuUI>\n        {props.program === \"tutor\" && <p>학부생 튜터링</p>}\n        {userData.role !== 3 ? (\n          <MenuUI.Group title=\"학생\">\n            {studentNav.map((nav, index) => {\n              return (\n                <MenuUI.Item key={index}>\n                  <NavLink exact to={`/tutor/student${nav.to}`}>\n                    {nav.title}\n                  </NavLink>\n                </MenuUI.Item>\n              );\n            })}\n          </MenuUI.Group>\n        ) : undefined}\n        {userData.role === 3 ? (\n          <MenuUI.Group title=\"관리자\">\n            {adminNav.map((nav, index) => {\n              return (\n                <MenuUI.Item key={index}>\n                  <NavLink exact to={`/tutor/admin${nav.to}`}>\n                    {nav.title}\n                  </NavLink>\n                </MenuUI.Item>\n              );\n            })}\n          </MenuUI.Group>\n        ) : undefined}\n      </MenuUI>\n    </div>\n  );\n}\n\nexport default Menu;\n","/home/tutoring/cbnututoring/src/components/AllList.js",["110"],"import React, { useState, useEffect } from \"react\";\nimport Table from \"./Table\";\nimport axios from \"axios\";\n\nconst AllList = ({ years, isCourseManage = false }) => {\n  const [year, setYear] = useState(2020);\n  const [semester, setSemester] = useState(1);\n  const [datas, setDatas] = useState();\n  const isAlllist = !isCourseManage;\n\n  useEffect(() => {\n    const tempYear = window.localStorage.getItem(\"year\");\n    const tempSemester = window.localStorage.getItem(\"semester\");\n    if (tempYear !== null && tempYear !== year) {\n      setYear(tempYear);\n    }\n    if (tempSemester !== null && tempSemester !== semester) {\n      setSemester(tempSemester);\n    }\n\n    search();\n  }, []);\n\n  const yearChange = (e) => {\n    if (e.target.name === \"year\") {\n      setYear(e.target.value);\n    } else {\n      setSemester(e.target.value);\n    }\n  };\n\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    search();\n    window.localStorage.setItem(\"year\", year);\n    window.localStorage.setItem(\"semester\", semester);\n  };\n\n  const search = () => {\n    axios\n      .get(`/api/courses/find/${year}/${semester}`)\n      .then(function (response) {\n        console.log(\"검색결과\", response);\n        if (response.data.courseData !== datas) {\n          setDatas(response.data.courseData);\n        }\n      })\n      .catch((error) => {\n        console.log(\"erer : \", error);\n      });\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleOnSubmit}>\n        <div className=\"dateWrap\">\n          <div className=\"yearWrap\">\n            년도{\" \"}\n            <select name=\"year\" value={year} onChange={yearChange}>\n              {years.map((year) => (\n                <option value={year} key={year}>\n                  {year}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"semesterWrap\">\n            학기{\" \"}\n            <select name=\"semester\" value={semester} onChange={yearChange}>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n            </select>\n          </div>\n          <button type=\"submit\">검색</button>\n        </div>\n      </form>\n\n      <Table\n        datas={datas}\n        isAllList={isAlllist}\n        isCourseManage={isCourseManage}\n        year={year}\n        semester={semester}\n      ></Table>\n    </div>\n  );\n};\n\nexport default AllList;\n","/home/tutoring/cbnututoring/src/components/CourseReg.js",["111","112","113","114"],"/home/tutoring/cbnututoring/src/components/Login.js",["115"],"import React, { useState, useRef, useContext } from \"react\";\nimport { toaster } from \"evergreen-ui\";\nimport { Link } from \"react-router-dom\";\nimport { IsLogin } from \"../App\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport AuthService from \"../services/auth.service\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        필수 입력 칸입니다.\n      </div>\n    );\n  }\n};\n\nconst Login = (props) => {\n  const form = useRef();\n  const checkBtn = useRef();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const { loginStatus, setLoginStatus } = useContext(IsLogin);\n\n  const onChangeUsername = (e) => {\n    const username = e.target.value;\n    setUsername(username);\n  };\n\n  const onChangePassword = (e) => {\n    const password = e.target.value;\n    setPassword(password);\n  };\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n\n    setMessage(\"\");\n    setLoading(true);\n\n    form.current.validateAll();\n\n    if (checkBtn.current.context._errors.length === 0) {\n      const response = await AuthService.login(username, password).catch(\n        (error) => {\n          setLoginStatus(false);\n          toaster.danger(\n            \"로그인 실패 : 아이디/비밀번호와 인터넷 상태를 확인해주세요\"\n          );\n          setLoading(false);\n          setPassword(\"\");\n          props.history.push(\"/login\");\n        }\n      );\n      if (response !== undefined) {\n        if (response.data.success === true) {\n          setLoginStatus(true); //로그인 성공시 status true로 바꿔서 헤더랑 이것저것 권한 되겡\n          toaster.success(\"로그인을 성공했습니다.\"); //로그인 성공시 유저 데이터 불러옴.\n          username === \"admin\"\n            ? props.history.push(\"/tutor/admin/coursemanage\")\n            : props.history.push(\"/tutor/student/alllist\");\n        } else {\n          setLoginStatus(false);\n          toaster.danger(\"로그인 실패 : 아이디/비밀번호를 확인해주세요\");\n          setLoading(false);\n          props.history.push(\"/login\");\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"col-md-12 flex-column d-flex justify-content-center align-items-center\">\n      <div className=\"w-25 text-center\">\n        <span className=\"red\">회원가입</span>(상단 오른쪽) 후{\" \"}\n        <span className=\"red\">로그인</span>하셔야 서비스를 이용할 수 있습니다.\n      </div>\n      <div className=\"card card-container\">\n        <img\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n          alt=\"profile-img\"\n          className=\"profile-img-card\"\n        />\n\n        <Form onSubmit={handleLogin} ref={form}>\n          <div className=\"form-group\">\n            <label htmlFor=\"username\">ID/학번</label>\n            <Input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"username\"\n              value={username}\n              onChange={onChangeUsername}\n              validations={[required]}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">비밀번호</label>\n            <Input\n              type=\"password\"\n              className=\"form-control\"\n              name=\"password\"\n              value={password}\n              onChange={onChangePassword}\n              validations={[required]}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <button className=\"btn btn-primary btn-block\" disabled={loading}>\n              {loading && (\n                <span className=\"spinner-border spinner-border-sm\"></span>\n              )}\n              <span>로그인</span>\n            </button>\n          </div>\n\n          {message && (\n            <div className=\"form-group\">\n              <div className=\"alert alert-danger\" role=\"alert\">\n                {message}\n              </div>\n            </div>\n          )}\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\n        </Form>\n        <p className=\"forgetQuestion\">\n          비밀번호를 잊으셨나요? <Link to=\"/forgotpassword\">여기</Link>를\n          클릭하세요\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/home/tutoring/cbnututoring/src/components/EnrolmentSeason.js",["116","117"],"import Axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport { toaster } from \"evergreen-ui\";\n\nconst EnrolmentSeason = (props) => {\n  const [values, setValues] = useState({\n    start: \"\",\n    end: \"\",\n    year: 2020,\n    semester: 1,\n  });\n\n  const [setTime_start, settingStartTime] = useState(0);\n  const [setTime_end, settingEndTime] = useState(0);\n\n  useEffect(() => {\n    Axios.get(`/api/systems/find/1/${values.year}/${values.semester}`)\n      .then((res) => {\n        if (res.data.result !== null) {\n          settingEndTime(res.data.result.end);\n          settingStartTime(res.data.result.start);\n        }\n      })\n      .catch((error) => console.log(error));\n  }, []);\n  useEffect(() => {\n    Axios.get(`/api/systems/find/1/${values.year}/${values.semester}`)\n      .then((res) => {\n        if (\n          res.data.result !== null &&\n          res.data.result.start !== setTime_start &&\n          res.data.result.end !== setTime_end\n        ) {\n          settingEndTime(res.data.result.end);\n          settingStartTime(res.data.result.start);\n          console.log(\"될까?\", setTime_start, res.data.result.start);\n        }\n      })\n      .catch((error) => console.log(error));\n  }, [values.year, values.semester]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    console.log(name, value);\n    setValues({ ...values, [name]: value });\n  };\n  const toDate = (timestamp) => {\n    const newDate = new Date(timestamp);\n    return `${newDate.getFullYear()}년 ${\n      newDate.getMonth() + 1\n    }월 ${newDate.getDate()}일`;\n  };\n\n  return (\n    <>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          const start = new Date(values.start).getTime();\n          const end = new Date(values.end).getTime();\n          Axios.post(\"/api/systems/modify\", {\n            systemId: 1,\n            year: values.year,\n            semester: values.semester,\n            start: start,\n            end: end,\n          }).then((res) => {\n            toaster.success(\"기간 변경 성공\");\n            console.log(\"제출해봄\", res);\n            settingStartTime(start);\n            settingEndTime(end);\n          });\n        }}\n      >\n        <div className=\"dateWrap\">\n          <div className=\"yearWrap\">\n            년도{\" \"}\n            <select name=\"year\" onChange={handleChange}>\n              {props.years.map((year) => (\n                <option value={year} key={year}>\n                  {year}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"semesterWrap\">\n            학기{\" \"}\n            <select name=\"semester\" onChange={handleChange}>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n            </select>\n          </div>\n        </div>\n        <h5>수강신청 기간 설정</h5>\n        <p>\n          현재기간 : {toDate(setTime_start)} ~ {toDate(setTime_end)}\n        </p>\n        <input\n          type=\"date\"\n          name=\"start\"\n          value={values.start}\n          onChange={handleChange}\n        ></input>\n        ~\n        <input\n          type=\"date\"\n          name=\"end\"\n          value={values.end}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\">기간 변경</button>\n      </form>\n    </>\n  );\n};\n\nexport default EnrolmentSeason;\n","/home/tutoring/cbnututoring/src/components/User.js",["118","119","120","121","122"],"import React, { useContext, useState } from \"react\";\nimport { TextInput, TextInputField, Pane, Button } from \"evergreen-ui\";\nimport { UserData } from \"../App\";\nimport Axios from \"axios\";\n\nconst department = [\n  \"컴퓨터공학과\",\n  \"소프트웨어학과\",\n  \"정보통신학과\",\n  \"로봇학과\",\n];\nconst User = (props) => {\n  const { userData, setUserData } = useContext(UserData);\n\n  const goBack = () => {\n    props.history.goBack();\n  };\n\n  const modify = () => {};\n\n  return (\n    <Pane\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\" center\"\n      width=\"auto\"\n      padding=\"40px\"\n      backgroundColor=\"#ffffff\"\n    >\n      <form onSubmit={modify}>\n        <h4>회원정보 수정</h4>\n        <label htmlFor=\"_id\">학번</label>\n        <TextInput name=\"_id\" value={userData._id} disabled />\n        <label htmlFor=\"newPassword\">새 비밀번호</label>\n        <TextInput name=\"newPassword\"></TextInput>\n        <label htmlFor=\"newPassword\">새 비밀번호 확인</label>\n        <TextInput name=\"newPasswordCheck\"></TextInput>\n        <label htmlFor=\"name\">이름</label>\n        <TextInput name=\"name\" value={userData.name}></TextInput>\n        <label htmlFor=\"email\">이메일</label>\n        <TextInput name=\"email\" value={userData.email}></TextInput>\n        <label htmlFor=\"phoneNumber\">휴대폰번호</label>\n        <TextInput name=\"phoneNumber\" value={userData.phoneNumber}></TextInput>\n        <label htmlFor=\"department\">학과</label>\n        <TextInput name=\"department\" value={userData.department}></TextInput>\n        <Pane\n          display=\"flex\"\n          flexDirection=\"row\"\n          marginTop=\"30px\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <Button intent=\"success\" type=\"submit\" marginRight=\"1rem\">\n            수정\n          </Button>\n          <Button intent=\"danger\" onClick={goBack}>\n            취소\n          </Button>\n        </Pane>\n      </form>\n    </Pane>\n  );\n};\n\nexport default User;\n","/home/tutoring/cbnututoring/src/components/CourseManage.js",[],"/home/tutoring/cbnututoring/src/components/Report.js",["123","124"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Table, Button, Select } from \"evergreen-ui\";\nimport Axios from \"axios\";\nconst fileDownload = require(\"js-file-download\");\n\nfunction Report({ years }) {\n  const [year, setYear] = useState(2020);\n  const [semester, setSemester] = useState(1);\n  const [datas, setDatas] = useState();\n  const [selectWeek, setWeek] = useState(1);\n  const week = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n  const X = \"X\";\n\n  const yearChange = (e) => {\n    if (e.target.name === \"year\") {\n      setYear(e.target.value);\n    } else {\n      setSemester(e.target.value);\n    }\n  };\n\n  const reportDown = (date, data) => {\n    console.log(data.fileId);\n    Axios({\n      url: `/api/reports/download`,\n      method: \"POST\",\n      responseType: \"blob\",\n      data: {\n        fileId: data.fileId,\n      },\n    })\n      .then((res) => {\n        fileDownload(\n          res.data,\n          `${decodeURIComponent(res.headers[\"file-name\"])}`\n        );\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    axios\n      .post(\"/api/reports/find/\", { year: year, semester: semester })\n      .then((res) => {\n        setDatas(res.data.courseData);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  const search = (e) => {\n    e.preventDefault();\n    axios\n      .post(\"/api/reports/find/\", {\n        year: year,\n        semester: semester,\n        week: week,\n      })\n      .then((res) => {\n        console.log(\"이번엔 위크넣어서\", res);\n\n        if (datas !== res.data.courseData) {\n          setDatas(res.data.courseData);\n        }\n      });\n\n    window.localStorage.setItem(\"year\", year);\n    window.localStorage.setItem(\"semester\", semester);\n  };\n  return (\n    <div>\n      <form onSubmit={search}>\n        <div className=\"dateWrap\">\n          <div className=\"yearWrap\">\n            년도{\" \"}\n            <select name=\"year\" value={year} onChange={yearChange}>\n              <option value={2020}>2020</option>\n              <option value={2021}>2021</option>\n              <option value={2022}>2022</option>\n              <option value={2023}>2023</option>\n              <option value={2024}>2024</option>\n              <option value={2025}>2025</option>\n              <option value={2026}>2026</option>\n              ))\n            </select>\n          </div>\n          <div className=\"semesterWrap\">\n            학기{\" \"}\n            <select name=\"semester\" value={semester} onChange={yearChange}>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n            </select>\n          </div>\n          <button type=\"submit\">검색</button>\n        </div>\n      </form>\n      <Table>\n        <Table.Head>\n          <Table.TextHeaderCell>강좌이름</Table.TextHeaderCell>\n          <Table.TextHeaderCell>튜터이름</Table.TextHeaderCell>\n          {week.map((data) => (\n            <Table.TextHeaderCell key={data}>{data}주차</Table.TextHeaderCell>\n          ))}\n          <Table.TextHeaderCell>다운로드</Table.TextHeaderCell>\n        </Table.Head>\n        <Table.Body>\n          {datas &&\n            datas.map((data) => (\n              <Table.Row key={data.id}>\n                <Table.TextCell>{data.courseName}</Table.TextCell>\n                <Table.TextCell>{data.tutorName}</Table.TextCell>\n                {week.map((date) => (\n                  <Table.TextCell key={(data.id, \"-\", date)}>\n                    {data.reports.some((e) => e.week === date) ? (\n                      <Button\n                        onClick={() =>\n                          reportDown(\n                            date,\n                            data.reports.find(\n                              (element) => element.week === date\n                            )\n                          )\n                        }\n                      >\n                        O\n                      </Button>\n                    ) : (\n                      \"X\"\n                    )}\n                  </Table.TextCell>\n                ))}\n                <Table.TextCell>\n                  <Button\n                    onClick={() => {\n                      Axios({\n                        url: `/api/reports/downloads`,\n                        method: \"POST\",\n                        responseType: \"blob\",\n                        data: {\n                          year: year,\n                          semester: semester,\n                          _id: data.tutorNumber,\n                        },\n                      })\n                        .then((res) => {\n                          console.log(\"집파일 맞나유~\", res);\n                          fileDownload(\n                            res.data,\n                            `${decodeURIComponent(res.headers[\"file-name\"])}`\n                          );\n                        })\n                        .catch((err) => console.log(\"왜안뒈..\", err));\n                    }}\n                  >\n                    다운로드\n                  </Button>\n                </Table.TextCell>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          console.log(\"보내는데이터\", selectWeek, year, semester);\n          Axios({\n            url: `/api/reports/downloads`,\n            method: \"POST\",\n            responseType: \"blob\",\n            data: {\n              week: selectWeek,\n              year: year,\n              semester: semester,\n            },\n          })\n            .then((res) => {\n              fileDownload(\n                res.data,\n                `${decodeURIComponent(res.headers[\"file-name\"])}`\n              );\n            })\n            .catch((err) => null);\n        }}\n      >\n        <Select\n          value={selectWeek}\n          onChange={(event) => {\n            setWeek(event.target.value);\n          }}\n        >\n          {week.map((data, idx) => (\n            <option value={data} key={idx}>\n              {data}\n            </option>\n          ))}\n        </Select>\n        <span>주차</span>\n        <Button type=\"submit\" marginY={8} marginLeft=\"1rem\">\n          보고서 다운로드\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default Report;\n","/home/tutoring/cbnututoring/src/components/ForgotPassword.js",[],"/home/tutoring/cbnututoring/src/components/Table.js",["125"],"import React, { useContext, useState, useEffect } from \"react\";\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\nimport { UserData } from \"../App\";\nimport {\n  Table as TableUI,\n  Button,\n  Dialog,\n  Pane,\n  toaster,\n  Alert,\n} from \"evergreen-ui\";\nimport DialogContents from \"./DialogContents\";\nimport User from \"../services/user.service\";\nimport Axios from \"axios\";\nconst fileDownload = require(\"js-file-download\");\n\nconst departmentList = [\"컴퓨터공학과\", \"소프트웨어\", \"정보통신\", \"로봇\"];\n\nfunction Table({\n  datas,\n  isAllList = false,\n  isCourseManage = false,\n  isMylist = false,\n  year,\n  semester,\n}) {\n  const { userData } = useContext(UserData);\n  const [mylistData, setmylistdata] = useState();\n  const [accessSeason, setAccessSeason] = useState(true);\n  const [isShown, setIsShown] = useState(false);\n  const [dialog, setDialog] = useState({\n    title: \"\",\n    confirmLabel: \"\",\n    content: \"\",\n    hasFooter: false,\n  });\n\n  useEffect(() => {\n    Axios.get(`/api/systems/find/1/${year}/${semester}`)\n      .then((res) => {\n        if (\n          res.data.result.start > Date.now() ||\n          Date.now() > res.data.result.end\n        ) {\n          setAccessSeason(false);\n        }\n        console.log(res.data.result.start, res.data.result.end, Date.now());\n      })\n      .catch((error) => console.log(error));\n  }, [year, semester]);\n  useEffect(() => {\n    //push\n\n    Axios.get(`/api/registration/`)\n      .then(function (response) {\n        setmylistdata(response.data.result);\n      })\n      .catch((error) => console.log(\"whyrano\", error));\n  }, []);\n\n  const handleDialog = (newcontent) => {\n    setDialog(Object.assign({}, dialog, newcontent));\n  };\n\n  const setIsShownFalse = () => {\n    //console.log(\"상위컴포넌트로 넘기기 되나? \", text);//이게 되네 ㅎ\n    setIsShown(false);\n  };\n  //if (datas.tutorNumber === userData.studentNumber) {\n  //  console.log(\"나 튜터임\");\n  //}\n  //        <CourseReg years={[2020, 2021]}></CourseReg>\n\n  return (\n    <Pane>\n      {isAllList && !accessSeason && (\n        <Alert intent=\"warning\" title=\"수강신청 기간이 아닙니다.\"></Alert>\n      )}\n      <Dialog\n        isShown={isShown}\n        title={dialog.title}\n        onCloseComplete={() => {\n          setIsShown(false);\n        }}\n        confirmLabel={dialog.confirmLabel}\n        hasFooter={dialog.hasFooter}\n      >\n        {dialog.content}\n      </Dialog>\n      <div className=\"scroll-page\">\n        <TableUI textAlign=\"center\">\n          <TableUI.Head>\n            <TableUI.TextHeaderCell>소속</TableUI.TextHeaderCell>\n            <TableUI.TextHeaderCell flexBasis={50} flexShrink={0} flexGrow={0}>\n              학년\n            </TableUI.TextHeaderCell>\n            <TableUI.TextHeaderCell>교과목명</TableUI.TextHeaderCell>\n            <TableUI.TextHeaderCell>담당교수</TableUI.TextHeaderCell>\n            <TableUI.TextHeaderCell>튜터명</TableUI.TextHeaderCell>\n            <TableUI.TextHeaderCell flexBasis={120} flexShrink={0} flexGrow={0}>\n              튜터프로필\n            </TableUI.TextHeaderCell>\n            {isAllList ? (\n              <TableUI.TextHeaderCell\n                flexBasis={50}\n                flexShrink={0}\n                flexGrow={0}\n              >\n                신청인원\n              </TableUI.TextHeaderCell>\n            ) : undefined}\n            <TableUI.TextHeaderCell flexBasis={250} flexShrink={0} flexGrow={0}>\n              {\" \"}\n            </TableUI.TextHeaderCell>\n          </TableUI.Head>\n          <TableUI.Body height={240}>\n            {!datas ? (\n              <TableUI.TextCell>내역이 없습니다.</TableUI.TextCell>\n            ) : (\n              datas.map((data, index) => (\n                <TableUI.Row key={data.id}>\n                  <TableUI.TextCell>\n                    {departmentList[data.department]}\n                  </TableUI.TextCell>\n                  <TableUI.TextCell flexBasis={50} flexShrink={0} flexGrow={0}>\n                    {data.grade}\n                  </TableUI.TextCell>\n                  <TableUI.TextCell>{data.courseName}</TableUI.TextCell>\n                  <TableUI.TextCell>{data.professorName}</TableUI.TextCell>\n                  <TableUI.TextCell>{data.tutorName}</TableUI.TextCell>\n                  <TableUI.TextCell flexBasis={120} flexShrink={0} flexGrow={0}>\n                    <Button\n                      height={32}\n                      onClick={() => {\n                        handleDialog({\n                          title: \"튜터 프로필\",\n                          confirmLabel: \"확인\",\n                          hasFooter: true,\n                          content: (\n                            <div>\n                              <p>{data.profile}</p>\n                            </div>\n                          ),\n                        });\n                        setIsShown(true);\n                      }}\n                    >프로필 보기</Button>\n                  </TableUI.TextCell>\n                  {isAllList ? (\n                    <TableUI.TextCell\n                      flexBasis={50}\n                      flexShrink={0}\n                      flexGrow={0}\n                    >\n                      {data.appliedCount}\n                    </TableUI.TextCell>\n                  ) : undefined}\n                  {isAllList ? (\n                    <TableUI.TextCell\n                      flexBasis={250}\n                      flexShrink={0}\n                      flexGrow={0}\n                    >\n                      <Button\n                        appearance=\"minimal\"\n                        onClick={() => {\n                          Axios({\n                            url: `/api/courses/download/${data.fileId}`,\n                            method: \"GET\",\n                            responseType: \"blob\",\n                          })\n                            .then((res) => {\n                              fileDownload(\n                                res.data,\n                                `${decodeURIComponent(\n                                  res.headers[\"file-name\"]\n                                )}`\n                              );\n                            })\n                            .catch((error) => console.log(error));\n                        }}\n                      >\n                        운영 계획서\n                      </Button>\n                      <Button\n                        appearance=\"minimal\"\n                        disabled={\n                          !accessSeason ||\n                          data.tutorNumber === userData._id ||\n                          (mylistData &&\n                            mylistData.some((e) => e.id === data.id))\n                            ? true\n                            : false\n                        }\n                        onClick={() => {\n                          if (data.appliedCount < data.limit) {\n                            handleDialog({\n                              title: \"수강신청\",\n                              confirmLabel: \"신청\",\n                              content: (\n                                <DialogContents.Enrolment\n                                  data={data}\n                                  onSubmit={setIsShownFalse}\n                                  readOnly\n                                />\n                              ),\n                            });\n                            setIsShown(true);\n                          } else {\n                            console.log(\n                              \"왜 안되는 거쥬\",\n                              data.appliedCount,\n                              data.limit\n                            );\n                            toaster.warning(\n                              \"인원이 초과되어 신청할 수 없습니다.\",\n                              {\n                                duration: 3,\n                              }\n                            );\n                          }\n                          //User.regCourse(data.id);\n                        }}\n                      >\n                        수강신청\n                      </Button>\n                    </TableUI.TextCell>\n                  ) : undefined}\n                  {isCourseManage ? (\n                    <TableUI.TextCell\n                      flexBasis={250}\n                      flexShrink={0}\n                      flexGrow={0}\n                    >\n                      <Button\n                        appearance=\"minimal\"\n                        onClick={() => {\n                          handleDialog({\n                            title: \"강좌 수정\",\n                            confirmLabel: \"수정\",\n                            content: (\n                              <DialogContents.CourseModify\n                                data={data}\n                                onSubmit={setIsShownFalse}\n                              />\n                            ),\n                          });\n\n                          setIsShown(true);\n                        }}\n                      >\n                        수정\n                      </Button>\n                      <Button\n                        appearance=\"minimal\"\n                        onClick={() => {\n                          handleDialog({\n                            title: \"코스 삭제\",\n                            confirmLabel: \"삭제\",\n                            content: (\n                              <div>\n                                <p>{data.courseName}과목을 삭제하시겠습니까?</p>\n                                <Button onClick={() => setIsShownFalse()}>\n                                  아니오\n                                </Button>\n                                <Button\n                                  intent=\"danger\"\n                                  onClick={() => {\n                                    User.courseDelete(data.id)\n                                      .then((res) => {\n                                        console.log(\"코스삭제 오류 확인\", res);\n                                        if (res.data.success === true) {\n                                          toaster.success(\n                                            \"코스 삭제 완료되었습니다.\",\n                                            { duration: 3 }\n                                          );\n                                        } else {\n                                          toaster.warning(\n                                            \"에러가 발생해 코스 삭제를 실패 했습니다.\",\n                                            {\n                                              duration: 3,\n                                            }\n                                          );\n                                        }\n                                        setIsShownFalse();\n                                      })\n                                      .catch((error) => console.log(error));\n                                    window.location.reload(false);\n                                  }}\n                                >\n                                  예, 삭제하겠습니다.\n                                </Button>\n                              </div>\n                            ),\n                          });\n                          setIsShown(true);\n                        }}\n                      >\n                        삭제\n                      </Button>\n                      <Button\n                        appearance=\"minimal\"\n                        disabled={data.appliedCount > 0 ? false : true}\n                        onClick={() => {\n                          handleDialog({\n                            title: \"수강생 목록 확인\",\n                            confirmLabel: \"나가기\",\n                            content: (\n                              <DialogContents.StudentList\n                                data={data}\n                                year={year}\n                                semester={semester}\n                                onSubmit={setIsShownFalse}\n                              />\n                            ),\n                          });\n                          setIsShown(true);\n                        }}\n                      >\n                        수강생 목록\n                      </Button>\n                    </TableUI.TextCell>\n                  ) : undefined}\n                  {isMylist ? (\n                    <TableUI.TextCell\n                      flexBasis={250}\n                      flexShrink={0}\n                      flexGrow={0}\n                    >\n                      <Button\n                        appearance=\"minimal\"\n                        onClick={() => {\n                          handleDialog({\n                            title: \"수강 신청 취소\",\n                            confirmLabel: \"취소\",\n                            content: (\n                              <div>\n                                <p>\n                                  {data.courseName}과목의 수강을\n                                  취소하시겠습니까?\n                                </p>\n                                <Button onClick={() => setIsShownFalse()}>\n                                  아니오\n                                </Button>\n                                <Button\n                                  onClick={() => {\n                                    User.cancleRegCourse(data.id).then(\n                                      (res) => {\n                                        if (res.data.success === true) {\n                                          console.log(res.data);\n                                          toaster.success(\n                                            \"수강 취소 완료되었습니다.\",\n                                            { duration: 3 }\n                                          );\n                                          window.location.reload(false);\n                                        } else {\n                                          toaster.warning(\n                                            \"에러가 발생해 수강 취소를 하지 못했습니다.\",\n                                            {\n                                              duration: 3,\n                                            }\n                                          );\n                                        }\n                                        setIsShownFalse();\n                                      }\n                                    );\n                                  }}\n                                >\n                                  예, 수강 취소하겠습니다.\n                                </Button>\n                              </div>\n                            ),\n                          });\n                          setIsShown(true);\n                        }}\n                      >\n                        신청취소\n                      </Button>\n                      <Button\n                        appearance=\"minimal\"\n                        disabled={data.tutorNumber !== userData._id}\n                        onClick={() => {\n                          handleDialog({\n                            title: \"보고서 등록\",\n                            confirmLabel: \"등록\",\n\n                            content: (\n                              <DialogContents.ReportReg\n                                data={data.id}\n                                onSubmit={setIsShownFalse}\n                              />\n                            ),\n                          });\n\n                          setIsShown(true);\n                        }}\n                      >\n                        보고서등록\n                      </Button>\n                    </TableUI.TextCell>\n                  ) : undefined}\n                </TableUI.Row>\n              ))\n            )}\n          </TableUI.Body>\n        </TableUI>\n      </div>\n    </Pane>\n  );\n}\n\nexport default Table;\n","/home/tutoring/cbnututoring/src/services/user.service.js",["126","127","128","129","130","131","132","133"],"import axios from \"axios\";\n\nconst courseInfo = (year, semester) => {\n  return axios\n    .get(\"/api/\" + `courses/${year}/${semester}`)\n    .then((response) => console.log(\"코스정보 불러오기 \", response));\n};\n\nconst courseRegister = (sendForm) => {\n  axios({\n    url: \"/api/\" + \"courses/register\",\n    method: \"POST\",\n    data: sendForm,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    },\n  })\n    .then(function (response) {\n      console.log(\"코스등록 이벤트 : \", response);\n    })\n    .catch((error) => console.log(\"error : \", error.response));\n};\nconst courseDelete = (id) => {\n  return axios.get(\"/api/\" + `courses/delete/${id}`);\n};\n\nconst registrationInfo = () => {\n  return axios\n    .get(\"/api/\" + \"registration\")\n    .then((response) => console.log(\"등록한 코스정보 확인\"))\n    .catch((error) => console.log(\"등록한 코스 정보 확인 에러 \", error));\n};\n\nconst cancleRegCourse = (id) => {\n  return axios.get(\"/api/\" + `registration/delete/${id}`);\n};\n\nconst regCourse = (id) => {\n  return axios.post(\"/api/\" + `registration/register`, { courseId: id });\n};\n\nconst courseModify = (data) => {\n  return axios({\n    url: \"/api/courses/modify\",\n    method: \"POST\",\n    data: data,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    },\n  });\n};\n\nconst reportUpload = (sendForm) => {\n  return axios({\n    url: \"/api/reports/upload\",\n    method: \"POST\",\n    data: sendForm,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    },\n  });\n};\n\nconst getReports = () => {\n  axios\n    .get(\"/api/\" + \"/reports/\")\n    .then((response) => console.log(\"레포트확인\"))\n    .catch((error) => console.log(\"레포트확인 에러 \", error));\n};\n\nexport default {\n  courseInfo,\n  courseRegister,\n  courseDelete,\n  registrationInfo,\n  cancleRegCourse,\n  regCourse,\n  reportUpload,\n  getReports,\n  courseModify,\n};\n",["134","135"],"/home/tutoring/cbnututoring/src/components/DialogContents.js",["136","137","138","139"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { UserData } from \"../App\";\nimport { TextInputField, Button, toaster, Select } from \"evergreen-ui\";\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\nimport User from \"../services/user.service\";\nimport Axios from \"axios\";\nimport styled from \"styled-components\";\n\nconst department = [\"컴퓨터공학과\", \"소프트웨어학과\", \"정보통신학과\", \"로봇\"];\nconst week = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nconst year = [2020, 2021, 2022, 2023, 2024, 2025, 2026];\n\nconst Enrolment = ({ onSubmit, data }) => {\n  const { userData } = useContext(UserData);\n  console.log(\"Enrolment : \", userData, data);\n  const onenrolmentSubmit = () => {\n    User.regCourse(data.id)\n      .then((res) => {\n        if (res.data.success === true) {\n          toaster.success(\"코스 등록에 성공했습니다.\", {\n            duration: 3,\n          });\n          window.location.reload(false);\n        } else {\n          toaster.danger(\"코스 등록에 실패했습니다.\", {\n            duration: 5,\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(\"등록안됨\");\n        toaster.danger(\"코스 등록에 실패했습니다.\", {\n          duration: 5,\n        });\n      });\n    onSubmit();\n  };\n\n  return (\n    <div className=\"enrolment\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          onenrolmentSubmit();\n        }}\n      >\n        <TextInputField\n          label=\"학과\"\n          defaultValue={department[userData.department]}\n        />\n        <TextInputField label=\"학번\" defaultValue={userData._id} />\n        <TextInputField label=\"이름\" defaultValue={userData.name} />\n        <TextInputField label=\"이메일\" defaultValue={userData.email} />\n        <TextInputField label=\"연락처\" defaultValue={userData.phoneNumber} />\n        <Button onClick={() => onSubmit()} intent=\"danger\">\n          취소\n        </Button>\n        <Button type=\"submit\">제출</Button>\n      </form>\n    </div>\n  );\n};\n\nconst CourseModify = ({ onSubmit, data }) => {\n  const [values, setValues] = useState({\n    year: data.year,\n    semester: data.semester,\n    department: data.department,\n    grade: data.grade,\n    courseName: data.courseName,\n    professorName: data.professorName,\n    tutorName: data.tutorName,\n    tutorNumber: data.tutorNumber,\n    limit: data.limit,\n    file: data.file,\n  });\n\n  const handleChange = (e) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  const handleFileChange = (e) => {\n    setValues({ ...values, file: e.target.files[0] });\n  };\n\n  const onmodifySubmit = () => {\n    const sendForm = new FormData();\n    for (const i in values) {\n      sendForm.append(i, values[i]);\n    }\n\n    sendForm.append(\"courseId\", data.id);\n    for (let key of sendForm.keys()) {\n      console.log(\"제출 키\", key);\n    }\n\n    // FormData의 value 확인\n    for (let value of sendForm.values()) {\n      console.log(\"제출 값\", value);\n    }\n\n    User.courseModify(sendForm)\n      .then((res) => {\n        console.log(res);\n        if (res.data.success === true) {\n          toaster.success(\"코스 수정에 성공했습니다.\", {\n            duration: 3,\n          });\n          window.location.reload(false);\n        } else {\n          toaster.danger(\"코스 수정에 실패했습니다.\", {\n            duration: 3,\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        toaster.danger(\"코스 수정에 실패했습니다.\", {\n          duration: 3,\n        });\n      });\n    onSubmit();\n  };\n  return (\n    <div className=\"courseModify\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          onmodifySubmit();\n        }}\n        encType=\"multipart/form-data\"\n      >\n        <ul>\n          <li>\n            <label htmlFor=\"year\">년도</label>\n            <select name=\"year\" value={values.year} onChange={handleChange}>\n              {year.map((year) => (\n                <option value={year} key={year}>\n                  {year}\n                </option>\n              ))}\n              ))\n            </select>\n          </li>\n          <li>\n            <label htmlFor=\"semester\">학기</label>\n            <select\n              name=\"semester\"\n              value={values.semester}\n              onChange={handleChange}\n            >\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n            </select>\n          </li>\n          <li>\n            <label htmlFor=\"department\">소속</label>\n            <select name=\"department\" onChange={handleChange}>\n              <option value=\"0\">컴퓨터공학과</option>\n              <option value=\"1\">소프트웨어학과</option>\n              <option value=\"2\">정보통신공학부</option>\n              <option value=\"3\">지능로봇공학과</option>\n            </select>\n          </li>\n          <li>\n            <label htmlFor=\"grade\">학년</label>\n            <select name=\"grade\" onChange={handleChange}>\n              <option value=\"1\">1학년</option>\n              <option value=\"2\">2학년</option>\n              <option value=\"3\">3학년</option>\n              <option value=\"4\">4학년</option>\n            </select>\n          </li>\n          <li>\n            <label htmlFor=\"courseName\">교과목명</label>\n            <input\n              type=\"text\"\n              name=\"courseName\"\n              value={values.courseName}\n              onChange={handleChange}\n            ></input>\n          </li>\n\n          <li>\n            <label htmlFor=\"professorName\">담당교수</label>\n            <input\n              type=\"text\"\n              name=\"professorName\"\n              value={values.professorName}\n              onChange={handleChange}\n            ></input>\n          </li>\n          <li>\n            <label htmlFor=\"tutorName\">튜터이름</label>\n            <input\n              type=\"text\"\n              name=\"tutorName\"\n              value={values.tutorName}\n              onChange={handleChange}\n            ></input>\n          </li>\n          <li>\n            <label htmlFor=\"tutorNumber\">튜터학번</label>\n            <input\n              type=\"text\"\n              name=\"tutorNumber\"\n              value={values.tutorNumber}\n              onChange={handleChange}\n            ></input>\n          </li>\n          <li>\n            <label htmlFor=\"limit\">최대인원</label>\n            <input\n              type=\"text\"\n              name=\"limit\"\n              value={values.limit}\n              onChange={handleChange}\n            ></input>\n          </li>\n          <li>\n            <label htmlFor=\"file\">운영계획서</label>\n            <input\n              type=\"file\"\n              name=\"file\"\n              accept=\".pdf,.hwp\"\n              onChange={handleFileChange}\n            />\n          </li>\n        </ul>\n        <Button\n          onClick={(e) => {\n            e.preventDefault();\n            onSubmit();\n          }}\n          marginRight=\"0.5rem\"\n        >\n          취소\n        </Button>\n        <Button intent=\"success\" type=\"submit\">\n          수정\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nconst ReportReg = ({ onSubmit, data }) => {\n  const [values, setValues] = useState({\n    file: \"\",\n    week: 1,\n  });\n\n  const handleChange = (e) => {\n    setValues({ ...values, week: e.target.value });\n  };\n\n  const handleFileChange = (e) => {\n    setValues({ ...values, file: e.target.files[0] });\n  };\n\n  const onreportSubmit = (e) => {\n    const sendForm = new FormData();\n    sendForm.append(\"file\", values.file);\n    sendForm.append(\"week\", values.week);\n    sendForm.append(\"courseId\", data);\n\n    e.preventDefault();\n    User.reportUpload(sendForm)\n      .then((res) => {\n        if (res.data.success === true) {\n          console.log(res);\n          toaster.success(\"보고서 등록에 성공했습니다.\", {\n            duration: 3,\n          });\n          onSubmit();\n        } else {\n          toaster.danger(\"보고서 등록에 실패했습니다.\" + res.data.success, {\n            duration: 3,\n          });\n        }\n      })\n      .catch((error) => {\n        toaster.danger(\"보고서 등록에 실패했습니다.\" + error, {\n          duration: 3,\n        });\n      });\n  };\n  return (\n    <div>\n      <form onSubmit={onreportSubmit}>\n        <label htmlFor=\"reportWeek\">기간</label>\n        <select name=\"reportWeek\" onChange={handleChange}>\n          {week.map((data, idx) => {\n            return (\n              <option value={data} key={idx}>\n                {data}주차\n              </option>\n            );\n          })}\n        </select>\n        <label htmlFor=\"file\">보고서</label>\n        <input\n          type=\"file\"\n          name=\"file\"\n          accept=\".pdf,.hwp\"\n          onChange={handleFileChange}\n        />\n        <div>\n          <Button\n            intent=\"danger\"\n            onClick={(e) => {\n              e.preventDefault();\n              onSubmit();\n            }}\n          >\n            취소\n          </Button>\n          <Button type=\"submit\">제출</Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n/*user정보는 context에서 들고옴. 그 외에 정보는 props로 전달 받음 user정보에 있는건 바로 출력되도록 하기*/\n\nconst StudentList = ({ onSubmit, data, year, semester }) => {\n  const [infos, setInfo] = useState([]);\n\n  useEffect(() => {\n    console.log(\"courseID\", data);\n    Axios.post(\"/api/registration/get\", { courseId: data.id })\n      .then((res) => {\n        console.log(res);\n        if (infos !== res.data.result) {\n          setInfo(res.data.result);\n        }\n      })\n      .catch((err) => console.log(\"에러\" + err));\n  }, []);\n\n  return (\n    <>\n      <div className=\"scroll-page\">\n        <table id=\"student-list-to-xls\">\n          <thead>\n            <tr>\n              <th className=\"hidden\">소속</th>\n              <th className=\"hidden\">학년</th>\n              <th className=\"hidden\">교과목명</th>\n              <th className=\"hidden\">담당교수</th>\n              <th className=\"hidden\">튜터명</th>\n              <th>학번</th>\n              <th>학과</th>\n              <th>이름</th>\n              <th>이메일</th>\n            </tr>\n          </thead>\n          <tbody>\n            {infos &&\n              infos.map((info) => (\n                <tr key={info.id}>\n                  <td className=\"hidden\">{department[data.department]}</td>\n                  <td className=\"hidden\">{data.grade}</td>\n                  <td className=\"hidden\">{data.courseName}</td>\n                  <td className=\"hidden\">{data.professorName}</td>\n                  <td className=\"hidden\">{data.tutorName}</td>\n                  <td>{info._id}</td>\n                  <td>{department[info.department]}</td>\n                  <td>{info.name}</td>\n                  <td>{info.email}</td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n      <ReactHTMLTableToExcel\n        id=\"student-list-xls-button\"\n        className=\"download-table-xls-button\"\n        table=\"student-list-to-xls\"\n        filename={`${year}_${semester}학기_${data.courseName}수강생`}\n        sheet=\"sheet1\"\n        buttonText=\"수강생 목록 다운로드\"\n      />\n      <Button onClick={onSubmit}>취소</Button>\n    </>\n  );\n};\n\nexport default { Enrolment, CourseModify, ReportReg, StudentList };\n",{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":4,"column":10,"nodeType":"146","messageId":"147","endLine":4,"endColumn":16},{"ruleId":"144","severity":1,"message":"148","line":11,"column":8,"nodeType":"146","messageId":"147","endLine":11,"endColumn":21},{"ruleId":"144","severity":1,"message":"149","line":27,"column":7,"nodeType":"146","messageId":"147","endLine":27,"endColumn":12},{"ruleId":"144","severity":1,"message":"150","line":73,"column":10,"nodeType":"146","messageId":"147","endLine":73,"endColumn":21},{"ruleId":"151","severity":1,"message":"152","line":11,"column":38,"nodeType":"153","messageId":"154","endLine":11,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":21,"column":1,"nodeType":"157","endLine":25,"endColumn":3},{"ruleId":"144","severity":1,"message":"158","line":2,"column":27,"nodeType":"146","messageId":"147","endLine":2,"endColumn":40},{"ruleId":"144","severity":1,"message":"159","line":2,"column":42,"nodeType":"146","messageId":"147","endLine":2,"endColumn":52},{"ruleId":"144","severity":1,"message":"160","line":2,"column":53,"nodeType":"146","messageId":"147","endLine":2,"endColumn":58},{"ruleId":"144","severity":1,"message":"161","line":2,"column":60,"nodeType":"146","messageId":"147","endLine":2,"endColumn":66},{"ruleId":"144","severity":1,"message":"162","line":7,"column":10,"nodeType":"146","messageId":"147","endLine":7,"endColumn":16},{"ruleId":"144","severity":1,"message":"163","line":7,"column":18,"nodeType":"146","messageId":"147","endLine":7,"endColumn":27},{"ruleId":"164","severity":1,"message":"165","line":20,"column":6,"nodeType":"166","endLine":20,"endColumn":8,"suggestions":"167"},{"ruleId":"144","severity":1,"message":"168","line":6,"column":10,"nodeType":"146","messageId":"147","endLine":6,"endColumn":17},{"ruleId":"169","severity":1,"message":"170","line":20,"column":25,"nodeType":"153","messageId":"171","endLine":20,"endColumn":27},{"ruleId":"144","severity":1,"message":"172","line":120,"column":17,"nodeType":"146","messageId":"147","endLine":120,"endColumn":27},{"ruleId":"144","severity":1,"message":"173","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"174","line":37,"column":9,"nodeType":"146","messageId":"147","endLine":37,"endColumn":17},{"ruleId":"164","severity":1,"message":"175","line":22,"column":6,"nodeType":"166","endLine":22,"endColumn":8,"suggestions":"176"},{"ruleId":"144","severity":1,"message":"177","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":16,"column":28,"nodeType":"180","messageId":"181","endLine":16,"endColumn":55,"fix":"182"},{"ruleId":"144","severity":1,"message":"183","line":19,"column":9,"nodeType":"146","messageId":"147","endLine":19,"endColumn":28},{"ruleId":"178","severity":1,"message":"184","line":25,"column":26,"nodeType":"180","messageId":"181","endLine":25,"endColumn":76,"fix":"185"},{"ruleId":"144","severity":1,"message":"186","line":28,"column":11,"nodeType":"146","messageId":"147","endLine":28,"endColumn":22},{"ruleId":"164","severity":1,"message":"187","line":25,"column":6,"nodeType":"166","endLine":25,"endColumn":8,"suggestions":"188"},{"ruleId":"164","severity":1,"message":"189","line":40,"column":6,"nodeType":"166","endLine":40,"endColumn":36,"suggestions":"190"},{"ruleId":"144","severity":1,"message":"191","line":1,"column":29,"nodeType":"146","messageId":"147","endLine":1,"endColumn":37},{"ruleId":"144","severity":1,"message":"192","line":2,"column":21,"nodeType":"146","messageId":"147","endLine":2,"endColumn":35},{"ruleId":"144","severity":1,"message":"193","line":4,"column":8,"nodeType":"146","messageId":"147","endLine":4,"endColumn":13},{"ruleId":"144","severity":1,"message":"194","line":6,"column":7,"nodeType":"146","messageId":"147","endLine":6,"endColumn":17},{"ruleId":"144","severity":1,"message":"195","line":13,"column":21,"nodeType":"146","messageId":"147","endLine":13,"endColumn":32},{"ruleId":"144","severity":1,"message":"196","line":13,"column":9,"nodeType":"146","messageId":"147","endLine":13,"endColumn":10},{"ruleId":"164","severity":1,"message":"197","line":49,"column":6,"nodeType":"166","endLine":49,"endColumn":8,"suggestions":"198"},{"ruleId":"144","severity":1,"message":"199","line":2,"column":8,"nodeType":"146","messageId":"147","endLine":2,"endColumn":29},{"ruleId":"151","severity":1,"message":"152","line":5,"column":18,"nodeType":"153","messageId":"154","endLine":5,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":11,"column":18,"nodeType":"153","messageId":"154","endLine":11,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":24,"column":28,"nodeType":"153","messageId":"154","endLine":24,"endColumn":29},{"ruleId":"151","severity":1,"message":"152","line":29,"column":18,"nodeType":"153","messageId":"154","endLine":29,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":35,"column":28,"nodeType":"153","messageId":"154","endLine":35,"endColumn":29},{"ruleId":"151","severity":1,"message":"152","line":39,"column":29,"nodeType":"153","messageId":"154","endLine":39,"endColumn":30},{"ruleId":"151","severity":1,"message":"152","line":66,"column":18,"nodeType":"153","messageId":"154","endLine":66,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":71,"column":1,"nodeType":"157","endLine":81,"endColumn":3},{"ruleId":"140","replacedBy":"200"},{"ruleId":"142","replacedBy":"201"},{"ruleId":"144","severity":1,"message":"202","line":3,"column":43,"nodeType":"146","messageId":"147","endLine":3,"endColumn":49},{"ruleId":"144","severity":1,"message":"203","line":7,"column":8,"nodeType":"146","messageId":"147","endLine":7,"endColumn":14},{"ruleId":"164","severity":1,"message":"204","line":339,"column":6,"nodeType":"166","endLine":339,"endColumn":8,"suggestions":"205"},{"ruleId":"155","severity":1,"message":"156","line":389,"column":1,"nodeType":"157","endLine":389,"endColumn":68},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'ProgramSelect' is defined but never used.","'today' is assigned a value but never used.","'hasRequired' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'BrowserRouter' is defined but never used.","'HashRouter' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'myList' is assigned a value but never used.","'setMyList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'datas'. Either include it or remove the dependency array.","ArrayExpression",["208"],"'toaster' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","'resMessage' is assigned a value but never used.","'Component' is defined but never used.","'Navtitle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'search', 'semester', and 'year'. Either include them or remove the dependency array.",["209"],"'Redirect' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"file\"] found.","Property","unnecessarilyComputedProperty",{"range":"210","text":"211"},"'duplicateInspection' is assigned a value but never used.","Unnecessarily computed property [\"profile\"] found.",{"range":"212","text":"213"},"'loginStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'values.semester' and 'values.year'. Either include them or remove the dependency array.",["214"],"React Hook useEffect has missing dependencies: 'setTime_end' and 'setTime_start'. Either include them or remove the dependency array.",["215"],"'useState' is defined but never used.","'TextInputField' is defined but never used.","'Axios' is defined but never used.","'department' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'X' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'semester' and 'year'. Either include them or remove the dependency array.",["216"],"'ReactHTMLTableToExcel' is defined but never used.",["206"],["207"],"'Select' is defined but never used.","'styled' is defined but never used.","React Hook useEffect has missing dependencies: 'data' and 'infos'. Either include them or remove the dependency array.",["217"],"no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},[496,504],"\"file\"",[748,759],"\"profile\"",{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},"Update the dependencies array to be: [datas]",{"range":"230","text":"231"},"Update the dependencies array to be: [search, semester, year]",{"range":"232","text":"233"},"Update the dependencies array to be: [values.semester, values.year]",{"range":"234","text":"235"},"Update the dependencies array to be: [values.year, values.semester, setTime_start, setTime_end]",{"range":"236","text":"237"},"Update the dependencies array to be: [semester, year]",{"range":"238","text":"239"},"Update the dependencies array to be: [data, infos]",{"range":"240","text":"241"},[547,549],"[datas]",[679,681],"[search, semester, year]",[698,700],"[values.semester, values.year]",[1214,1244],"[values.year, values.semester, setTime_start, setTime_end]",[1288,1290],"[semester, year]",[9215,9217],"[data, infos]"]